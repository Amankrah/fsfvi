'use client';

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  RefreshCw,
  AlertTriangle,
  Loader2
} from 'lucide-react';
import { analysisAPI } from '@/lib/api';
import { SystemVulnerabilityOverview } from '@/components/dashboard/SystemVulnerabilityOverview';
import { AnalysisNavigation } from '@/components/analysis/AnalysisNavigation';

interface SystemVulnerabilityData {
  fsfvi_results?: {
    fsfvi_score: number;
    vulnerability_percent: number;
    risk_level: string;
    financing_efficiency_percent: number;
  };
  financial_context?: {
    total_budget_millions: number;
    budget_efficiency: string;
    optimization_potential: string;
    intervention_urgency: string;
  };
  system_analysis?: {
    fsfvi_score: number;
    risk_level: string;
    total_allocation_millions: number;
    component_statistics?: {
      weighted_average_vulnerability: number;
      max_vulnerability: number;
      min_vulnerability: number;
    };
    government_insights?: {
      financing_efficiency_percent: number;
      resource_allocation_quality: string;
      budget_optimization_potential: string;
      intervention_urgency: string;
      system_stability: string;
    };
    critical_components?: string[];
    high_priority_components?: string[];
  };
  mathematical_interpretation?: {
    score: number;
    vulnerability_percent: number;
    interpretation: string;
    performance_category?: string;
  };
  executive_summary?: {
    overall_assessment: string;
    key_metrics: {
      fsfvi_score: string;
      financing_efficiency: string;
      critical_components: number;
      total_budget: string;
    };
    immediate_actions_required: boolean;
    system_stability: string;
  };
  country?: string;
  fiscal_year?: number;
  currency?: string;
}

export default function SystemVulnerabilityPage() {
  const params = useParams();
  const router = useRouter();
  const { user } = useAuth();
  const sessionId = params.sessionId as string;
  
  const [data, setData] = useState<SystemVulnerabilityData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);

  const getToken = () => localStorage.getItem('auth_token') || '';

  const loadData = async () => {
    if (!sessionId || !user) return;

    setLoading(true);
    setError(null);

    try {
      const token = getToken();
      const result = await analysisAPI.calculateSystemVulnerability(sessionId, token);
      setData(result);
    } catch (error) {
      console.error('Failed to load system vulnerability data:', error);
      setError('Failed to load system vulnerability data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const refreshData = async () => {
    setRefreshing(true);
    await loadData();
    setRefreshing(false);
  };

  useEffect(() => {
    loadData();
  }, [sessionId, user]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-12 w-12 animate-spin text-blue-600 mx-auto" />
          <p className="mt-4 text-gray-600">Loading system vulnerability analysis...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Card className="max-w-md">
          <CardHeader>
            <CardTitle className="flex items-center text-red-600">
              <AlertTriangle className="w-5 h-5 mr-2" />
              Analysis Error
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">{error}</p>
            <div className="flex space-x-2">
              <Button onClick={loadData}>Try Again</Button>
              <Button variant="outline" onClick={() => router.push('/dashboard')}>
                Back to Dashboard
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation */}
      <AnalysisNavigation 
        sessionId={sessionId}
        currentPage="system-vulnerability"
        sessionInfo={{
          country: data?.country,
          fiscal_year: data?.fiscal_year,
          currency: data?.currency
        }}
      />

      {/* Action Bar */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
          <div className="flex justify-end">
            <Button onClick={refreshData} disabled={refreshing} size="sm">
              <RefreshCw className={`w-4 h-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />
              Refresh Analysis
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <SystemVulnerabilityOverview 
          data={data}
          onRefresh={refreshData}
        />
      </main>
    </div>
  );
} 