'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  TrendingUp,
  RefreshCw,
  Activity,
  DollarSign,
  Target,
  BarChart3,
  TrendingDown,
  Zap,
  Users,
  AlertOctagon,
  Loader2,
  HelpCircle,
  Eye,
  EyeOff
} from 'lucide-react';
import { analysisAPI } from '@/lib/api';

interface ComponentVulnerability {
  component_name: string;
  component_type: string;
  vulnerability: number;
  priority_level: string;
  financial_allocation?: number;
  performance_gap?: number;
  risk_level?: string;
  weight?: number;
  allocation_percent?: number;
  observed_value?: number;
  benchmark_value?: number;
  sensitivity_parameter?: number;
  prefer_higher?: boolean;
  efficiency_index?: number;
  weighted_vulnerability?: number;
}

interface VulnerabilityData {
  component_vulnerabilities?: {
    components: { [key: string]: ComponentVulnerability };
    critical_components: string[];
    high_risk_components: string[];
    recommendations: string[];
  };
  vulnerabilities?: { [key: string]: ComponentVulnerability };
  components?: { [key: string]: ComponentVulnerability };
  summary?: {
    total_components: number;
    components_with_significant_vulnerabilities: number;
    average_vulnerability_percent: number;
    worst_performer: string;
    highest_vulnerability_percent: number;
    critical_components_count: number;
    high_risk_components_count: number;
    total_weighted_vulnerability?: number;
    average_efficiency_index?: number;
    budget_at_risk_percent?: number;
  };
  mathematical_context?: {
    formula_used: string;
    formula_description: string;
    calculation_method: string;
    validation_status: string;
    variables?: { [key: string]: string };
    weighting_method?: string;
    scenario_context?: string;
    sensitivity_estimation?: string;
  };
  analysis_metadata?: {
    total_components: number;
    total_budget_millions: number;
    method_used: string;
    scenario: string;
    timestamp: string;
    advanced_weighting_used: boolean;
    sensitivity_estimation_method: string;
  };
  country?: string;
  analysis_type?: string;
}

interface DistributionData {
  distribution_analysis: {
    component_allocations: { [key: string]: {
      component_name: string;
      current_allocation_usd_millions: number;
      percentage_of_total: number;
      sensitivity_parameter: number;
    }};
  };
}

interface ComponentVulnerabilityDetailsProps {
  sessionId: string;
  onDataLoad?: (hasData: boolean, insights?: {
    totalComponents: number;
    criticalCount: number;
    highRiskCount: number;
    avgVulnerability: number;
    riskLevel: string;
  }) => void;
}

export const ComponentVulnerabilityDetails: React.FC<ComponentVulnerabilityDetailsProps> = ({ 
  sessionId,
  onDataLoad
}) => {
  const [data, setData] = useState<VulnerabilityData | null>(null);
  const [distributionData, setDistributionData] = useState<DistributionData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);
  const [showDetails, setShowDetails] = useState(false);

  const getToken = () => localStorage.getItem('auth_token') || '';

  const formatComponentName = (component: ComponentVulnerability): string => {
    if (component.component_name) {
      return component.component_name;
    }
    if (component.component_type) {
      return component.component_type
        .replace('_', ' ')
        .split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
    }
    return 'Unknown Component';
  };

  useEffect(() => {
    const loadData = async () => {
      if (!sessionId) return;

      setLoading(true);
      setError(null);

      try {
        const token = getToken();
        
        // Load vulnerabilities data
        const vulnerabilityResult = await analysisAPI.calculateComponentVulnerabilities(sessionId, token);
        setData(vulnerabilityResult);

        // Load distribution data for enhanced context
        try {
          const distributionResult = await analysisAPI.analyzeCurrentDistribution(sessionId, token);
          setDistributionData(distributionResult);
        } catch (distributionError) {
          console.warn('Could not load distribution data:', distributionError);
        }

        // Calculate insights for parent component
        if (onDataLoad && vulnerabilityResult) {
          const components = vulnerabilityResult.component_vulnerabilities?.components || 
                            vulnerabilityResult.vulnerabilities || 
                            vulnerabilityResult.components;
          
          if (components) {
            const componentList = Object.values(components);
            const criticalCount = vulnerabilityResult.component_vulnerabilities?.critical_components?.length || 0;
            const highRiskCount = vulnerabilityResult.component_vulnerabilities?.high_risk_components?.length || 0;
            const avgVulnerability = vulnerabilityResult.summary?.average_vulnerability_percent || 
               (componentList.length > 0 ? componentList.reduce((sum: number, c) => sum + (c as ComponentVulnerability).vulnerability, 0) / componentList.length * 100 : 0);
            
            onDataLoad(true, {
              totalComponents: componentList.length,
              criticalCount,
              highRiskCount,
              avgVulnerability,
              riskLevel: criticalCount > 0 ? 'critical' : highRiskCount > 0 ? 'high' : avgVulnerability > 30 ? 'medium' : 'low'
            });
          } else {
            onDataLoad(false);
          }
        }

      } catch (error) {
        console.error('Failed to load component vulnerabilities data:', error);
        setError('Failed to load component vulnerabilities analysis. Please ensure your data is properly uploaded and try again.');
        if (onDataLoad) {
          onDataLoad(false);
        }
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [sessionId, onDataLoad]);

  const refreshData = async () => {
    setRefreshing(true);
    const token = getToken();
    
    try {
      const vulnerabilityResult = await analysisAPI.calculateComponentVulnerabilities(sessionId, token);
      setData(vulnerabilityResult);
      
      try {
        const distributionResult = await analysisAPI.analyzeCurrentDistribution(sessionId, token);
        setDistributionData(distributionResult);
      } catch (distributionError) {
        console.warn('Could not load distribution data:', distributionError);
      }
    } catch (error) {
      console.error('Failed to refresh data:', error);
    } finally {
      setRefreshing(false);
    }
  };

  // Handle multiple data sources for backward compatibility
  const componentsData = data?.component_vulnerabilities?.components || 
                        data?.vulnerabilities || 
                        data?.components;
  
  const components = componentsData ? 
    Object.values(componentsData).filter(comp => 
      comp && 
      typeof comp === 'object' && 
      comp.component_type && 
      typeof comp.component_type === 'string'
    ) : [];
  
  const criticalComponents = data?.component_vulnerabilities?.critical_components || [];
  const highRiskComponents = data?.component_vulnerabilities?.high_risk_components || [];
  const recommendations = data?.component_vulnerabilities?.recommendations || [];

  const getRiskConfig = (priority: string) => {
    switch (priority) {
      case 'critical':
        return {
          color: 'bg-red-50 text-red-700 border-red-200',
          bgColor: 'bg-red-100',
          textColor: 'text-red-600',
          barColor: 'bg-red-500',
          icon: <AlertOctagon className="w-5 h-5" />,
          status: 'Critical Risk'
        };
      case 'high':
        return {
          color: 'bg-orange-50 text-orange-700 border-orange-200',
          bgColor: 'bg-orange-100',
          textColor: 'text-orange-600',
          barColor: 'bg-orange-500',
          icon: <AlertTriangle className="w-5 h-5" />,
          status: 'High Risk'
        };
      case 'medium':
        return {
          color: 'bg-yellow-50 text-yellow-700 border-yellow-200',
          bgColor: 'bg-yellow-100',
          textColor: 'text-yellow-600',
          barColor: 'bg-yellow-500',
          icon: <Activity className="w-5 h-5" />,
          status: 'Medium Risk'
        };
      case 'low':
        return {
          color: 'bg-green-50 text-green-700 border-green-200',
          bgColor: 'bg-green-100',
          textColor: 'text-green-600',
          barColor: 'bg-green-500',
          icon: <CheckCircle className="w-5 h-5" />,
          status: 'Low Risk'
        };
      default:
        return {
          color: 'bg-gray-50 text-gray-700 border-gray-200',
          bgColor: 'bg-gray-100',
          textColor: 'text-gray-600',
          barColor: 'bg-gray-500',
          icon: <Shield className="w-5 h-5" />,
          status: 'Unknown'
        };
    }
  };

  if (loading) {
    return (
      <Card className="shadow-xl border-0 bg-white/95 backdrop-blur-sm">
        <CardContent className="p-12">
          <div className="text-center">
            <div className="bg-orange-100 p-4 rounded-full w-fit mx-auto mb-6">
              <Shield className="w-12 h-12 text-orange-600 animate-pulse" />
            </div>
            <h3 className="text-2xl font-bold text-gray-900 mb-4">
              Analyzing Component Vulnerabilities
            </h3>
            <p className="text-gray-600 mb-6 max-w-md mx-auto leading-relaxed">
              Calculating risk assessments and vulnerability scores for food system components...
            </p>
            <div className="flex items-center justify-center space-x-2">
              <Loader2 className="h-5 w-5 animate-spin text-orange-600" />
              <span className="text-orange-600 font-medium">Processing analysis</span>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="shadow-xl border-0 bg-gradient-to-br from-red-50 to-pink-50">
        <CardHeader className="text-center">
          <div className="bg-red-100 p-4 rounded-full w-fit mx-auto mb-4">
            <AlertTriangle className="w-12 h-12 text-red-600" />
          </div>
          <CardTitle className="text-2xl text-red-600">
            Analysis Error
          </CardTitle>
        </CardHeader>
        <CardContent className="text-center">
          <p className="text-gray-700 mb-6 leading-relaxed">{error}</p>
          <Button onClick={refreshData} className="bg-red-600 hover:bg-red-700">
            <RefreshCw className="w-4 h-4 mr-2" />
            Try Again
          </Button>
        </CardContent>
      </Card>
    );
  }

  if (!data || !components || components.length === 0) {
    return (
      <Card className="shadow-xl border-0 bg-gradient-to-br from-blue-50 to-indigo-50">
        <CardContent className="p-12 text-center">
          <div className="bg-blue-100 p-4 rounded-full w-fit mx-auto mb-6">
            <Shield className="h-12 w-12 text-blue-600" />
          </div>
          <h3 className="text-2xl font-bold text-gray-900 mb-4">
            Component Vulnerability Analysis
          </h3>
          <p className="text-gray-600 mb-8 max-w-md mx-auto leading-relaxed">
            Run the component vulnerability analysis to see detailed risk assessments and vulnerability scores for each component.
          </p>
          <Button onClick={refreshData} size="lg" className="bg-blue-600 hover:bg-blue-700">
            <TrendingUp className="w-5 h-5 mr-2" />
            Calculate Vulnerabilities
          </Button>
        </CardContent>
      </Card>
    );
  }

  const summary = data?.summary;
  const metadata = data?.analysis_metadata;
  
  // Calculate insights
  const totalBudget = metadata?.total_budget_millions || components.reduce((sum, c) => sum + (c.financial_allocation || 0), 0);
  const averageVulnerability = summary?.average_vulnerability_percent || (components.reduce((sum, c) => sum + c.vulnerability, 0) / components.length * 100);
  const budgetAtRisk = components.filter(c => c.priority_level === 'critical' || c.priority_level === 'high')
    .reduce((sum, c) => sum + (c.financial_allocation || 0), 0);
  const budgetAtRiskPercent = totalBudget > 0 ? (budgetAtRisk / totalBudget * 100) : 0;

  return (
    <div className="space-y-8">
      {/* Overview Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="shadow-lg border-0 bg-gradient-to-br from-blue-50 to-blue-100 hover:shadow-xl transition-all duration-300">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-600 text-sm font-medium">Total Components</p>
                <p className="text-3xl font-bold text-blue-900">{components.length}</p>
              </div>
              <div className="bg-blue-200 p-3 rounded-full">
                <Users className="w-8 h-8 text-blue-700" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="shadow-lg border-0 bg-gradient-to-br from-red-50 to-red-100 hover:shadow-xl transition-all duration-300">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-red-600 text-sm font-medium">Critical Risk</p>
                <p className="text-3xl font-bold text-red-900">{criticalComponents.length}</p>
                <p className="text-xs text-red-700">Immediate Action</p>
              </div>
              <div className="bg-red-200 p-3 rounded-full">
                <AlertOctagon className="w-8 h-8 text-red-700" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="shadow-lg border-0 bg-gradient-to-br from-orange-50 to-orange-100 hover:shadow-xl transition-all duration-300">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-orange-600 text-sm font-medium">High Risk</p>
                <p className="text-3xl font-bold text-orange-900">{highRiskComponents.length}</p>
                <p className="text-xs text-orange-700">Priority Focus</p>
              </div>
              <div className="bg-orange-200 p-3 rounded-full">
                <AlertTriangle className="w-8 h-8 text-orange-700" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="shadow-lg border-0 bg-gradient-to-br from-green-50 to-green-100 hover:shadow-xl transition-all duration-300">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-600 text-sm font-medium">Budget at Risk</p>
                <p className="text-3xl font-bold text-green-900">${budgetAtRisk.toFixed(1)}M</p>
                <p className="text-xs text-green-700">{budgetAtRiskPercent.toFixed(1)}% of total</p>
              </div>
              <div className="bg-green-200 p-3 rounded-full">
                <DollarSign className="w-8 h-8 text-green-700" />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Critical Components Alert */}
      {criticalComponents.length > 0 && (
        <Card className="shadow-lg border-0 bg-gradient-to-r from-red-50 to-pink-50 border-l-4 border-red-400">
          <CardHeader>
            <CardTitle className="flex items-center text-red-800">
              <AlertOctagon className="w-6 h-6 mr-3" />
              Critical Vulnerabilities Detected
            </CardTitle>
            <CardDescription className="text-red-700">
              {criticalComponents.length} component{criticalComponents.length > 1 ? 's' : ''} require immediate intervention to prevent system failure.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              {criticalComponents.map((compName, index) => (
                <Badge key={index} className="bg-red-100 text-red-800 border border-red-300 px-3 py-1">
                  <AlertOctagon className="w-3 h-3 mr-1" />
                  {compName}
                </Badge>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Component Analysis */}
      <Card className="shadow-xl border-0 bg-white">
        <CardHeader className="bg-gradient-to-r from-gray-50 to-blue-50 border-b">
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center text-2xl">
                <Shield className="w-6 h-6 mr-3 text-blue-600" />
                Component Vulnerability Analysis
              </CardTitle>
              <CardDescription className="text-lg mt-1">
                Comprehensive risk assessment for each food system component
              </CardDescription>
            </div>
            <div className="flex items-center space-x-3">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowDetails(!showDetails)}
                className="shadow-sm"
              >
                {showDetails ? <EyeOff className="w-4 h-4 mr-2" /> : <Eye className="w-4 h-4 mr-2" />}
                {showDetails ? 'Hide' : 'Show'} Details
              </Button>
              <Button variant="outline" onClick={refreshData} disabled={refreshing} className="shadow-sm">
                <RefreshCw className={`w-4 h-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />
                {refreshing ? 'Refreshing...' : 'Refresh'}
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-8">
          <div className="grid grid-cols-1 gap-6">
            {components.map((component) => {
              const riskConfig = getRiskConfig(component.priority_level);
              const allocationData = distributionData?.distribution_analysis?.component_allocations?.[component.component_type];
              const allocation = allocationData?.current_allocation_usd_millions || component.financial_allocation;
              
              return (
                <Card
                  key={component.component_type}
                  className="shadow-lg border-0 hover:shadow-xl transition-all duration-200"
                >
                  <CardContent className="p-6">
                    {/* Component Header */}
                    <div className="flex items-center justify-between mb-6">
                      <div className="flex items-center space-x-4">
                        <div className={`p-3 rounded-xl ${riskConfig.bgColor}`}>
                          <div className={riskConfig.textColor}>
                            {riskConfig.icon}
                          </div>
                        </div>
                        
                        <div>
                          <h3 className="text-xl font-bold text-gray-900 mb-1">
                            {formatComponentName(component)}
                          </h3>
                          <p className="text-gray-600">
                            Food System Component
                          </p>
                        </div>
                      </div>
                      
                      <Badge className={`${riskConfig.color} border px-4 py-2`}>
                        {riskConfig.status}
                      </Badge>
                    </div>

                    {/* Vulnerability Score */}
                    <div className={`mb-6 p-4 rounded-xl border-2 ${riskConfig.color}`}>
                      <div className="flex items-center justify-between mb-3">
                        <span className="text-sm font-semibold">Vulnerability Score</span>
                        <span className="text-3xl font-bold">{(component.vulnerability * 100).toFixed(1)}%</span>
                      </div>
                      <div className="w-full bg-white bg-opacity-50 rounded-full h-4">
                        <div 
                          className={`h-4 rounded-full transition-all duration-500 ${riskConfig.barColor}`}
                          style={{ width: `${Math.min(component.vulnerability * 100, 100)}%` }}
                        />
                      </div>
                      <p className="text-xs mt-2 opacity-80">
                        Comprehensive risk assessment score based on performance and system factors
                      </p>
                    </div>

                    {/* Key Metrics */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                      {/* Performance Gap */}
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <TrendingDown className="w-4 h-4 text-orange-500" />
                          <span className="text-sm font-medium text-gray-700">Performance Gap</span>
                        </div>
                        <div className="text-2xl font-bold text-orange-600">
                          {((component.performance_gap || 0) * 100).toFixed(1)}%
                        </div>
                        <div className="text-xs text-gray-600 mt-1">
                          Below benchmark
                        </div>
                      </div>

                      {/* Financial Allocation */}
                      {allocation && (
                        <div className="bg-blue-50 p-4 rounded-lg">
                          <div className="flex items-center space-x-2 mb-2">
                            <DollarSign className="w-4 h-4 text-blue-500" />
                            <span className="text-sm font-medium text-gray-700">Budget Allocation</span>
                          </div>
                          <div className="text-2xl font-bold text-blue-600">
                            ${allocation.toFixed(1)}M
                          </div>
                          {allocationData?.percentage_of_total && (
                            <div className="text-xs text-gray-600 mt-1">
                              {allocationData.percentage_of_total.toFixed(1)}% of total
                            </div>
                          )}
                        </div>
                      )}

                      {/* Efficiency Index */}
                      {component.efficiency_index !== undefined && (
                        <div className="bg-green-50 p-4 rounded-lg">
                          <div className="flex items-center space-x-2 mb-2">
                            <Zap className="w-4 h-4 text-green-500" />
                            <span className="text-sm font-medium text-gray-700">Efficiency Index</span>
                          </div>
                          <div className="text-2xl font-bold text-green-600">
                            {component.efficiency_index.toFixed(1)}%
                          </div>
                          <div className="text-xs text-gray-600 mt-1">
                            Resource effectiveness
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Additional Details */}
                    {showDetails && (
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 pt-6 border-t border-gray-100">
                        {/* Performance Data */}
                        <div className="bg-gray-50 p-4 rounded-lg">
                          <h5 className="font-bold text-gray-900 mb-4 flex items-center">
                            <BarChart3 className="w-4 h-4 mr-2" />
                            Performance Data
                          </h5>
                          <div className="space-y-3">
                            <div className="flex justify-between items-center">
                              <span className="text-gray-600">Observed Value:</span>
                              <span className="font-medium">{component.observed_value?.toLocaleString() || 'N/A'}</span>
                            </div>
                            <div className="flex justify-between items-center">
                              <span className="text-gray-600">Benchmark Value:</span>
                              <span className="font-medium">{component.benchmark_value?.toLocaleString() || 'N/A'}</span>
                            </div>
                            <div className="flex justify-between items-center">
                              <span className="text-gray-600">System Weight:</span>
                              <span className="font-medium">{((component.weight || 0) * 100).toFixed(1)}%</span>
                            </div>
                          </div>
                        </div>
                        
                        {/* Risk Assessment */}
                        <div className="bg-blue-50 p-4 rounded-lg">
                          <h5 className="font-bold text-gray-900 mb-4 flex items-center">
                            <Target className="w-4 h-4 mr-2" />
                            Risk Assessment
                          </h5>
                          <div className="space-y-3">
                            <p className="text-sm text-gray-700">
                              This component shows <strong>{component.priority_level}</strong> vulnerability.
                            </p>
                            <div className="bg-white p-3 rounded border-l-4 border-blue-400">
                              <p className="text-sm font-medium text-blue-900">Recommended Action:</p>
                              <p className="text-sm text-blue-800 mt-1">
                                {component.priority_level === 'critical' && 'Immediate intervention required to prevent system failure.'}
                                {component.priority_level === 'high' && 'Priority focus needed to reduce system risk.'}
                                {component.priority_level === 'medium' && 'Monitoring and gradual improvement recommended.'}
                                {component.priority_level === 'low' && 'Component is performing well with minimal risk.'}
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Recommendations */}
      {recommendations && recommendations.length > 0 && (
        <Card className="shadow-xl border-0 bg-gradient-to-r from-blue-50 to-indigo-50">
          <CardHeader>
            <CardTitle className="flex items-center text-xl">
              <Target className="w-6 h-6 mr-3 text-blue-600" />
              Strategic Recommendations
            </CardTitle>
            <CardDescription>
              Priority actions based on vulnerability analysis
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {recommendations.map((recommendation: string, index: number) => (
                <div key={index} className="bg-white p-4 rounded-lg shadow-sm border-l-4 border-blue-400">
                  <div className="flex items-start space-x-3">
                    <div className="bg-blue-100 rounded-full p-2 mt-1">
                      <span className="text-sm font-bold text-blue-700 w-5 h-5 flex items-center justify-center">
                        {index + 1}
                      </span>
                    </div>
                    <p className="text-sm font-medium text-gray-900 leading-relaxed">{recommendation}</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* System Summary */}
      <Card className="shadow-xl border-0 bg-gradient-to-r from-indigo-50 to-purple-50">
        <CardHeader>
          <CardTitle className="flex items-center text-indigo-900">
            <Activity className="w-6 h-6 mr-3" />
            System Vulnerability Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center p-4">
              <div className="text-4xl font-bold text-indigo-600 mb-2">{averageVulnerability.toFixed(1)}%</div>
              <div className="text-sm text-indigo-700">Average System Vulnerability</div>
            </div>
            <div className="text-center p-4">
              <div className="text-4xl font-bold text-red-600 mb-2">{((criticalComponents.length + highRiskComponents.length) / components.length * 100).toFixed(0)}%</div>
              <div className="text-sm text-red-700">Components at Risk</div>
            </div>
            <div className="text-center p-4">
              <div className="text-4xl font-bold text-green-600 mb-2">${totalBudget.toFixed(1)}M</div>
              <div className="text-sm text-green-700">Total Budget</div>
            </div>
          </div>
          <div className="mt-6 p-4 bg-white bg-opacity-70 rounded-lg">
            <p className="text-sm text-indigo-800 text-center leading-relaxed">
              <strong>System Assessment:</strong> {' '}
              {averageVulnerability > 50 ? 'High vulnerability detected - immediate system-wide intervention recommended' :
               averageVulnerability > 30 ? 'Moderate vulnerability - strategic improvements needed' :
               averageVulnerability > 15 ? 'Low to moderate vulnerability - targeted optimizations suggested' :
               'System shows resilient performance with minimal vulnerability'}
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}; 