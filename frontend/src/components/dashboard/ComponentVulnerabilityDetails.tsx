'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  TrendingUp,
  RefreshCw,
  Activity,
  DollarSign,
  Target,
  Info,
  BarChart3,
  TrendingDown,
  Zap,
  Users,
  AlertOctagon,
  Loader2,
  HelpCircle
} from 'lucide-react';
import { analysisAPI } from '@/lib/api';

interface ComponentVulnerability {
  component_name: string;
  component_type: string;
  vulnerability: number;
  priority_level: string;
  financial_allocation?: number;
  performance_gap?: number;
  risk_level?: string;
  weight?: number;
  allocation_percent?: number;
  observed_value?: number;
  benchmark_value?: number;
  sensitivity_parameter?: number;
  prefer_higher?: boolean;
  efficiency_index?: number;
  weighted_vulnerability?: number;
}

interface VulnerabilityData {
  component_vulnerabilities?: {
    components: { [key: string]: ComponentVulnerability };
    critical_components: string[];
    high_risk_components: string[];
    recommendations: string[];
  };
  vulnerabilities?: { [key: string]: ComponentVulnerability };
  components?: { [key: string]: ComponentVulnerability };
  summary?: {
    total_components: number;
    components_with_significant_vulnerabilities: number;
    average_vulnerability_percent: number;
    worst_performer: string;
    highest_vulnerability_percent: number;
    critical_components_count: number;
    high_risk_components_count: number;
    total_weighted_vulnerability?: number;
    average_efficiency_index?: number;
    budget_at_risk_percent?: number;
  };
  mathematical_context?: {
    formula_used: string;
    formula_description: string;
    calculation_method: string;
    validation_status: string;
    variables?: { [key: string]: string };
    weighting_method?: string;
    scenario_context?: string;
    sensitivity_estimation?: string;
  };
  analysis_metadata?: {
    total_components: number;
    total_budget_millions: number;
    method_used: string;
    scenario: string;
    timestamp: string;
    advanced_weighting_used: boolean;
    sensitivity_estimation_method: string;
  };
  country?: string;
  analysis_type?: string;
}

interface DistributionData {
  distribution_analysis: {
    component_allocations: { [key: string]: {
      component_name: string;
      current_allocation_usd_millions: number;
      percentage_of_total: number;
      sensitivity_parameter: number;
    }};
  };
}

interface ComponentVulnerabilityDetailsProps {
  sessionId: string;
  onDataLoad?: (hasData: boolean, insights?: {
    totalComponents: number;
    criticalCount: number;
    highRiskCount: number;
    avgVulnerability: number;
    riskLevel: string;
  }) => void;
}

interface TooltipProps {
  content: string;
  children: React.ReactNode;
}

const Tooltip: React.FC<TooltipProps> = ({ content, children }) => {
  const [isVisible, setIsVisible] = useState(false);

  return (
    <div 
      className="relative inline-block"
      onMouseEnter={() => setIsVisible(true)}
      onMouseLeave={() => setIsVisible(false)}
    >
      {children}
      {isVisible && (
        <div className="absolute z-50 w-80 px-4 py-3 text-sm text-white bg-gray-800 border border-gray-600 rounded-lg shadow-xl top-full left-0 mt-2">
          <div className="relative">
            <div className="whitespace-normal leading-relaxed">
              {content}
            </div>
            {/* Arrow pointing up */}
            <div className="absolute -top-1 left-4 transform -translate-y-full">
              <div className="w-0 h-0 border-l-4 border-r-4 border-b-4 border-transparent border-b-gray-800"></div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export const ComponentVulnerabilityDetails: React.FC<ComponentVulnerabilityDetailsProps> = ({ 
  sessionId,
  onDataLoad
}) => {
  const [data, setData] = useState<VulnerabilityData | null>(null);
  const [distributionData, setDistributionData] = useState<DistributionData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);

  const getToken = () => localStorage.getItem('auth_token') || '';

  const formatComponentName = (component: ComponentVulnerability): string => {
    if (component.component_name) {
      return component.component_name;
    }
    if (component.component_type) {
      return component.component_type
        .replace('_', ' ')
        .split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
    }
    return 'Unknown Component';
  };

  const formatComponentType = (componentType?: string): string => {
    return componentType ? componentType.replace('_', ' ') : 'unknown_type';
  };

  const loadData = async () => {
    if (!sessionId) return;

    setLoading(true);
    setError(null);

    try {
      const token = getToken();
      
      // Load vulnerabilities data
      const vulnerabilityResult = await analysisAPI.calculateComponentVulnerabilities(sessionId, token);
      setData(vulnerabilityResult);

      // Load distribution data for enhanced context
      try {
        const distributionResult = await analysisAPI.analyzeCurrentDistribution(sessionId, token);
        setDistributionData(distributionResult);
      } catch (distributionError) {
        console.warn('Could not load distribution data:', distributionError);
        // Continue without distribution data - component handles this gracefully
      }

      // Calculate insights for parent component
      if (onDataLoad && vulnerabilityResult) {
        const components = vulnerabilityResult.component_vulnerabilities?.components || 
                          vulnerabilityResult.vulnerabilities || 
                          vulnerabilityResult.components;
        
        if (components) {
          const componentList = Object.values(components);
          const criticalCount = vulnerabilityResult.component_vulnerabilities?.critical_components?.length || 0;
          const highRiskCount = vulnerabilityResult.component_vulnerabilities?.high_risk_components?.length || 0;
                     const avgVulnerability = vulnerabilityResult.summary?.average_vulnerability_percent || 
             (componentList.length > 0 ? componentList.reduce((sum: number, c) => sum + (c as ComponentVulnerability).vulnerability, 0) / componentList.length * 100 : 0);
          
          onDataLoad(true, {
            totalComponents: componentList.length,
            criticalCount,
            highRiskCount,
            avgVulnerability,
            riskLevel: criticalCount > 0 ? 'critical' : highRiskCount > 0 ? 'high' : avgVulnerability > 30 ? 'medium' : 'low'
          });
        } else {
          onDataLoad(false);
        }
      }

    } catch (error) {
      console.error('Failed to load component vulnerabilities data:', error);
      setError('Failed to load component vulnerabilities analysis. This may be due to missing data or calculation errors. Please ensure your data is properly uploaded and try again.');
      if (onDataLoad) {
        onDataLoad(false);
      }
    } finally {
      setLoading(false);
    }
  };

  const refreshData = async () => {
    setRefreshing(true);
    await loadData();
    setRefreshing(false);
  };

  useEffect(() => {
    loadData();
  }, [sessionId]);

  // Handle multiple data sources for backward compatibility
  // The API returns: { component_vulnerabilities: { components: {...}, critical_components: [...], ... } }
  const componentsData = data?.component_vulnerabilities?.components || 
                        data?.vulnerabilities || 
                        data?.components;
  
  const components = componentsData ? 
    Object.values(componentsData).filter(comp => 
      comp && 
      typeof comp === 'object' && 
      comp.component_type && 
      typeof comp.component_type === 'string'
    ) : [];
  
  const criticalComponents = data?.component_vulnerabilities?.critical_components || [];
  const highRiskComponents = data?.component_vulnerabilities?.high_risk_components || [];
  const recommendations = data?.component_vulnerabilities?.recommendations || [];

  const getRiskBadgeColor = (priority: string) => {
    switch (priority) {
      case 'critical':
        return 'bg-red-100 text-red-900 border-red-300';
      case 'high':
        return 'bg-orange-100 text-orange-900 border-orange-300';
      case 'medium':
        return 'bg-yellow-100 text-yellow-900 border-yellow-300';
      case 'low':
        return 'bg-green-100 text-green-900 border-green-300';
      default:
        return 'bg-gray-100 text-gray-900 border-gray-300';
    }
  };

  const getVulnerabilityIcon = (priority: string) => {
    switch (priority) {
      case 'critical':
        return <AlertOctagon className="w-4 h-4 text-red-600" />;
      case 'high':
        return <AlertTriangle className="w-4 h-4 text-orange-600" />;
      case 'medium':
        return <Activity className="w-4 h-4 text-yellow-600" />;
      case 'low':
        return <CheckCircle className="w-4 h-4 text-green-600" />;
      default:
        return <Shield className="w-4 h-4 text-gray-600" />;
    }
  };

  const getVulnerabilityColor = (priority_level: string) => {
    switch (priority_level) {
      case 'critical':
        return 'text-red-600 bg-red-50';
      case 'high':
        return 'text-orange-600 bg-orange-50';
      case 'medium':
        return 'text-yellow-600 bg-yellow-50';
      case 'low':
        return 'text-green-600 bg-green-50';
      default:
        return 'text-gray-600 bg-gray-50';
    }
  };

  const getProgressBarColor = (priority_level: string) => {
    switch (priority_level) {
      case 'critical':
        return 'bg-red-500';
      case 'high':
        return 'bg-orange-500';
      case 'medium':
        return 'bg-yellow-500';
      case 'low':
        return 'bg-green-500';
      default:
        return 'bg-gray-500';
    }
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Shield className="w-5 h-5 mr-2" />
              Component Vulnerability Analysis
            </CardTitle>
            <CardDescription>
              Loading comprehensive vulnerability analysis...
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-center py-8">
              <Loader2 className="h-12 w-12 animate-spin text-blue-600 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Calculating FSFVI Scores
              </h3>
              <p className="text-gray-600">
                Analyzing component vulnerabilities and assessment framework...
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center text-red-600">
              <AlertTriangle className="w-5 h-5 mr-2" />
              Analysis Error
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">{error}</p>
            <Button onClick={loadData}>
              <RefreshCw className="w-4 h-4 mr-2" />
              Try Again
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!data) {
    return (
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Shield className="w-5 h-5 mr-2" />
              Component Vulnerability Analysis
            </CardTitle>
            <CardDescription>
              Component vulnerabilities have not been calculated yet.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-center py-8">
              <Shield className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                No Vulnerability Data
              </h3>
              <p className="text-gray-600 mb-4">
                Run the component vulnerability analysis to see detailed risk assessments and FSFVI calculations.
              </p>
              <Button onClick={loadData}>
                <TrendingUp className="w-4 h-4 mr-2" />
                Calculate Vulnerabilities
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!components || components.length === 0) {
    return (
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center text-red-600">
              <AlertTriangle className="w-5 h-5 mr-2" />
              Analysis Error
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">
              Failed to load component vulnerability data. This could be due to:
            </p>
            <ul className="list-disc list-inside text-sm text-gray-600 mb-4 space-y-1">
              <li>Missing or invalid component data structure</li>
              <li>Session data not found or corrupted</li>
              <li>Backend processing errors</li>
              <li>Network connectivity issues</li>
            </ul>
            <div className="space-x-2">
              <Button onClick={refreshData}>
                <RefreshCw className="w-4 h-4 mr-2" />
                Refresh Analysis
              </Button>
              <Button variant="outline" onClick={() => console.log('Raw data:', data)}>
                <Info className="w-4 h-4 mr-2" />
                Debug Info
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  const summary = data?.summary;
  const metadata = data?.analysis_metadata;
  
  // Calculate additional insights
  // financial_allocation is already in millions USD from the API response
  const totalBudget = metadata?.total_budget_millions || components.reduce((sum, c) => sum + (c.financial_allocation || 0), 0);
  const averageVulnerability = summary?.average_vulnerability_percent || (components.reduce((sum, c) => sum + c.vulnerability, 0) / components.length * 100);
  const budgetAtRisk = components.filter(c => c.priority_level === 'critical' || c.priority_level === 'high')
    .reduce((sum, c) => sum + (c.financial_allocation || 0), 0);
  const budgetAtRiskPercent = totalBudget > 0 ? (budgetAtRisk / totalBudget * 100) : 0;

  return (
    <div className="space-y-6">
      {/* Enhanced Summary Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Components</p>
                <p className="text-2xl font-bold text-gray-900">{components.length}</p>
              </div>
              <Users className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Critical Risk</p>
                <p className="text-2xl font-bold text-red-600">{criticalComponents.length}</p>
                <p className="text-xs text-gray-500">Immediate Action</p>
              </div>
              <AlertOctagon className="w-8 h-8 text-red-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">High Risk</p>
                <p className="text-2xl font-bold text-orange-600">{highRiskComponents.length}</p>
                <p className="text-xs text-gray-500">Priority Focus</p>
              </div>
              <AlertTriangle className="w-8 h-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Avg Vulnerability</p>
                <p className="text-2xl font-bold text-blue-600">{averageVulnerability.toFixed(1)}%</p>
                <p className="text-xs text-gray-500">System Level</p>
              </div>
              <BarChart3 className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Budget at Risk</p>
                <p className="text-2xl font-bold text-red-600">${budgetAtRisk.toFixed(1)}M</p>
                <p className="text-xs text-gray-500">{budgetAtRiskPercent.toFixed(1)}% of total</p>
              </div>
              <DollarSign className="w-8 h-8 text-red-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Budget</p>
                <p className="text-2xl font-bold text-green-600">${totalBudget.toFixed(1)}M</p>
                <p className="text-xs text-gray-500">Allocation</p>
              </div>
              <Target className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Critical Components Alert */}
      {criticalComponents.length > 0 && (
        <Card className="border-red-200 bg-red-50">
          <CardHeader>
            <CardTitle className="flex items-center text-red-800">
              <AlertOctagon className="w-5 h-5 mr-2" />
              Critical Vulnerabilities Detected
            </CardTitle>
            <CardDescription className="text-red-700">
              {criticalComponents.length} component{criticalComponents.length > 1 ? 's' : ''} require immediate intervention to prevent system failure.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              {criticalComponents.map((compName, index) => (
                <Badge key={index} className="bg-red-100 text-red-800 border-red-300">
                  <AlertOctagon className="w-3 h-3 mr-1" />
                  {compName}
                </Badge>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Enhanced Component Details */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span className="flex items-center">
              <Shield className="w-5 h-5 mr-2" />
              Component Vulnerability Analysis
            </span>
            <Button variant="outline" onClick={refreshData} disabled={refreshing}>
              <RefreshCw className={`w-4 h-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />
              {refreshing ? 'Refreshing...' : 'Refresh'}
            </Button>
          </CardTitle>
          <CardDescription>
            Comprehensive FSFVI vulnerability assessment for each food system component
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {components.map((component) => {
              const allocationData = distributionData?.distribution_analysis?.component_allocations?.[component.component_type];
              const allocation = allocationData?.current_allocation_usd_millions || 
                               component.financial_allocation;
              
              return (
                <div key={component.component_type} className="border rounded-lg p-6 bg-white shadow-sm">
                  {/* Component Header */}
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      {getVulnerabilityIcon(component.priority_level)}
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">
                          {formatComponentName(component)}
                        </h3>
                        <p className="text-sm text-gray-600">
                          {formatComponentType(component.component_type)}
                        </p>
                      </div>
                    </div>
                                        <div className="flex items-center space-x-2">
                      <Badge className={getRiskBadgeColor(component.priority_level)}>
                        {component.priority_level.toUpperCase()} RISK
                      </Badge>
                    </div>
                  </div>

                  {/* Vulnerability Score Highlight */}
                  <div className={`mb-4 p-4 rounded-lg border-2 ${getVulnerabilityColor(component.priority_level)}`}>
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">FSFVI Vulnerability Score</span>
                      <span className="text-2xl font-bold">{(component.vulnerability * 100).toFixed(1)}%</span>
                    </div>
                    <div className="w-full bg-white bg-opacity-50 rounded-full h-3">
                      <div 
                        className={`h-3 rounded-full ${getProgressBarColor(component.priority_level)}`}
                        style={{ width: `${Math.min(component.vulnerability * 100, 100)}%` }}
                      ></div>
                    </div>
                    <p className="text-xs mt-1">
                      Vulnerability score reflects composite risk assessment
                    </p>
                  </div>

                  {/* Detailed Metrics Grid */}
                  <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                    {/* Performance Gap */}
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <div className="flex items-center space-x-2 mb-1">
                        <TrendingDown className="w-4 h-4 text-orange-500" />
                        <span className="text-sm font-medium text-gray-700">Performance Gap</span>
                      </div>
                      <div className="text-lg font-bold text-orange-600">
                        {((component.performance_gap || 0) * 100).toFixed(1)}%
                      </div>
                      {component.observed_value !== undefined && component.benchmark_value !== undefined && (
                        <div className="text-xs text-gray-600 mt-1">
                          {component.observed_value.toFixed(2)} vs {component.benchmark_value.toFixed(2)} benchmark
                        </div>
                      )}
                    </div>

                    {/* Financial Allocation */}
                    {allocation && (
                      <div className="bg-blue-50 p-3 rounded-lg">
                        <div className="flex items-center space-x-2 mb-1">
                          <DollarSign className="w-4 h-4 text-blue-500" />
                          <span className="text-sm font-medium text-gray-700">Budget Allocation</span>
                        </div>
                        <div className="text-lg font-bold text-blue-600">
                          ${allocation.toFixed(1)}M
                        </div>
                        {allocationData?.percentage_of_total && (
                          <div className="text-xs text-gray-600 mt-1">
                            {allocationData.percentage_of_total.toFixed(1)}% of total budget
                          </div>
                        )}
                      </div>
                    )}

                    {/* Efficiency Index */}
                    {component.efficiency_index !== undefined && (
                      <div className="bg-green-50 p-3 rounded-lg">
                        <div className="flex items-center space-x-2 mb-1">
                          <Zap className="w-4 h-4 text-green-500" />
                          <Tooltip content={`Efficiency Index: ${component.efficiency_index.toFixed(1)}% - This measures how much effectiveness you get per million dollars invested. Calculated as: (1 - vulnerability) / allocation × 100. Higher values mean better resource effectiveness. For example, ${component.efficiency_index.toFixed(1)}% means each $1M invested yields ${component.efficiency_index.toFixed(1)}% effectiveness.`}>
                            <span className="text-sm font-medium text-gray-700 flex items-center space-x-1">
                              <span>Efficiency Index</span>
                              <HelpCircle className="w-3 h-3" />
                            </span>
                          </Tooltip>
                        </div>
                        <div className="text-lg font-bold text-green-600">
                          {component.efficiency_index.toFixed(1)}%
                        </div>
                        <div className="text-xs text-gray-600 mt-1">
                          Resource effectiveness
                        </div>
                      </div>
                    )}

                    {/* Sensitivity Parameter */}
                    {component.sensitivity_parameter !== undefined && (
                      <div className="bg-purple-50 p-3 rounded-lg">
                        <div className="flex items-center space-x-2 mb-1">
                          <Activity className="w-4 h-4 text-purple-500" />
                          <Tooltip content={`Sensitivity Parameter: ${component.sensitivity_parameter.toExponential(2)} - This measures how responsive the component is to additional funding. Higher values mean the component benefits more from increased investment. Estimated using ${data?.mathematical_context?.sensitivity_estimation || 'hardcoded'} method.`}>
                            <span className="text-sm font-medium text-gray-700 flex items-center space-x-1">
                              <span>Sensitivity</span>
                              <HelpCircle className="w-3 h-3" />
                            </span>
                          </Tooltip>
                        </div>
                        <div className="text-lg font-bold text-purple-600">
                          {component.sensitivity_parameter.toExponential(2)}
                        </div>
                        <div className="text-xs text-gray-600 mt-1">
                          Response to funding
                        </div>
                      </div>
                    )}

                    {/* Weighted Vulnerability */}
                    {component.weighted_vulnerability !== undefined && (
                      <div className="bg-red-50 p-3 rounded-lg">
                        <div className="flex items-center space-x-2 mb-1">
                          <Target className="w-4 h-4 text-red-500" />
                          <Tooltip content={`Weighted Impact: ${(component.weighted_vulnerability * 100).toFixed(1)}% - This is the component's vulnerability multiplied by its system weight (${(component.vulnerability * 100).toFixed(1)}% × ${((component.weight || 0) * 100).toFixed(1)}%). It represents this component's actual contribution to the overall system vulnerability. Components with high weighted impact are priority targets for intervention.`}>
                            <span className="text-sm font-medium text-gray-700 flex items-center space-x-1">
                              <span>Weighted Impact</span>
                              <HelpCircle className="w-3 h-3" />
                            </span>
                          </Tooltip>
                        </div>
                        <div className="text-lg font-bold text-red-600">
                          {(component.weighted_vulnerability * 100).toFixed(1)}%
                        </div>
                        <div className="text-xs text-gray-600 mt-1">
                          System contribution
                        </div>
                      </div>
                    )}

                    {/* Component Weight */}
                    {component.weight !== undefined && (
                      <div className="bg-blue-50 p-3 rounded-lg">
                        <div className="flex items-center space-x-2 mb-1">
                          <Users className="w-4 h-4 text-blue-500" />
                          <Tooltip content={`Component Weight: ${(component.weight * 100).toFixed(1)}% - This represents the relative importance of this component in the overall food system. Higher weights indicate components that have greater impact on system-wide performance. The sum of all component weights equals 100%.`}>
                            <span className="text-sm font-medium text-gray-700 flex items-center space-x-1">
                              <span>Weight</span>
                              <HelpCircle className="w-3 h-3" />
                            </span>
                          </Tooltip>
                        </div>
                        <div className="text-lg font-bold text-blue-600">
                          {(component.weight * 100).toFixed(1)}%
                        </div>
                        <div className="text-xs text-gray-600 mt-1">
                          System importance
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Risk Assessment Summary */}
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="text-sm font-semibold text-gray-900 mb-2">Risk Assessment</h4>
                    <div className="text-sm text-gray-700">
                      This component shows <strong>{component.priority_level}</strong> vulnerability with{' '}
                      <strong>{(component.vulnerability * 100).toFixed(1)}%</strong> FSFVI score.{' '}
                      {component.priority_level === 'critical' && 'Immediate intervention required to prevent system failure.'}
                      {component.priority_level === 'high' && 'Priority focus needed to reduce system risk.'}
                      {component.priority_level === 'medium' && 'Monitoring and gradual improvement recommended.'}
                      {component.priority_level === 'low' && 'Component is performing well with minimal risk.'}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Analysis Metadata */}
      {data?.analysis_metadata && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Activity className="w-5 h-5 mr-2" />
              Analysis Summary
            </CardTitle>
            <CardDescription>
              Analysis methodology and parameters
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* Methodology Details */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                  <h6 className="text-sm font-semibold text-green-900">Analysis Method</h6>
                  <p className="text-sm text-green-800">{data.mathematical_context?.weighting_method || 'hybrid'}</p>
                </div>
                <div className="p-3 bg-purple-50 rounded-lg border border-purple-200">
                  <h6 className="text-sm font-semibold text-purple-900">Scenario Context</h6>
                  <p className="text-sm text-purple-800">{data.mathematical_context?.scenario_context || 'normal_operations'}</p>
                </div>
              </div>

              {/* Analysis Metadata */}
              <div className="p-4 bg-gray-50 rounded-lg border">
                <h5 className="text-sm font-semibold text-gray-900 mb-3">Analysis Metadata:</h5>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">Components Analyzed:</span>
                    <div className="font-semibold text-gray-900">{data.analysis_metadata.total_components}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Total Budget:</span>
                    <div className="font-semibold text-gray-900">${data.analysis_metadata.total_budget_millions.toFixed(1)}M</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Advanced Weighting:</span>
                    <div className="font-semibold text-gray-900">{data.analysis_metadata.advanced_weighting_used ? 'Yes' : 'No'}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Sensitivity Method:</span>
                    <div className="font-semibold text-gray-900">{data.analysis_metadata.sensitivity_estimation_method}</div>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Methodology Explanation */}
      <Card className="bg-yellow-50 border-yellow-200">
        <CardHeader>
          <CardTitle className="flex items-center text-yellow-900">
            <Info className="w-5 h-5 mr-2" />
            Understanding the Metrics
          </CardTitle>
          <CardDescription className="text-yellow-800">
            Key concepts in FSFVI vulnerability analysis
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Efficiency Index Explanation */}
          <div className="p-4 bg-white rounded-lg border border-yellow-300">
            <h4 className="text-sm font-semibold text-yellow-900 mb-2">📊 Efficiency Index</h4>
            <div className="text-sm text-yellow-800 space-y-2">
              <p><strong>What it measures:</strong> % effectiveness gained per $1M invested</p>
              {components.length > 0 && (
                <div>
                  <p><strong>Example:</strong> {formatComponentName(components[0])} shows {components[0].efficiency_index?.toFixed(1)}% efficiency:</p>
                  <ul className="list-disc list-inside ml-4 space-y-1">
                    <li>{(components[0].vulnerability * 100).toFixed(1)}% vulnerability means {((1 - components[0].vulnerability) * 100).toFixed(1)}% effectiveness</li>
                    <li>${components[0].financial_allocation?.toFixed(1)}M allocation</li>
                    <li>Results in {components[0].efficiency_index?.toFixed(1)}% efficiency rating</li>
                  </ul>
                </div>
              )}
              <p><strong>Interpretation:</strong> Higher values indicate better resource effectiveness per million dollars</p>
            </div>
          </div>

          {/* Risk Level Explanation */}
          <div className="p-4 bg-white rounded-lg border border-yellow-300">
            <h4 className="text-sm font-semibold text-yellow-900 mb-2">🚨 Robust Risk Assessment</h4>
            <div className="text-sm text-yellow-800 space-y-2">
              <p><strong>Multi-Factor Risk Determination:</strong></p>
              
              <div className="grid grid-cols-1 gap-2">
                <div><strong>Primary Factor:</strong> Vulnerability score based on performance gaps</div>
                <div><strong>Financial Exposure:</strong> Larger budget allocations increase system risk if vulnerable</div>
                <div><strong>System Importance:</strong> Higher component weights amplify risk impact</div>
              </div>
              
              {components.length > 0 && (
                <div className="bg-red-50 p-3 rounded border-l-4 border-red-400">
                  <div className="font-medium text-red-800 mb-1">Example Risk Analysis ({formatComponentName(components[0])}):</div>
                  <div className="text-xs space-y-1">
                    <div>• Base Vulnerability: {(components[0].vulnerability * 100).toFixed(1)}%</div>
                    <div>• Financial Exposure: ${components[0].financial_allocation?.toFixed(1)}M ({((components[0].financial_allocation || 0) / totalBudget * 100).toFixed(1)}% of total budget)</div>
                    <div>• System Weight: {((components[0].weight || 0) * 100).toFixed(1)}% (system importance)</div>
                    <div>• Risk Level: <strong className="text-red-600">{components[0].priority_level.toUpperCase()}</strong></div>
                  </div>
                </div>
              )}
              
              <p><strong>Improvement:</strong> Risk now reflects complete system impact, not just performance gaps</p>
            </div>
          </div>

          {/* FSFVI Framework Explanation */}
          <div className="p-4 bg-white rounded-lg border border-yellow-300">
            <h4 className="text-sm font-semibold text-yellow-900 mb-2">🧮 FSFVI Framework</h4>
            <div className="text-sm text-yellow-800 space-y-2">
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div><strong>Vulnerability</strong> = Component vulnerability score [0,1]</div>
                <div><strong>Performance Gap</strong> = Performance gap measure [0,1]</div>
                <div><strong>Sensitivity</strong> = Sensitivity parameter (response to funding)</div>
                <div><strong>Allocation</strong> = Financial allocation (millions USD)</div>
              </div>
              <p><strong>Diminishing Returns:</strong> More funding reduces vulnerability, but at decreasing rate</p>
            </div>
          </div>

          {/* Budget Explanation */}
          <div className="p-4 bg-white rounded-lg border border-yellow-300">
            <h4 className="text-sm font-semibold text-yellow-900 mb-2">💰 Budget Calculations</h4>
            <div className="text-sm text-yellow-800 space-y-2">
              <p><strong>Total Budget:</strong> {totalBudget.toFixed(1)}M USD (sum of all component allocations)</p>
              <p><strong>Budget at Risk:</strong> {budgetAtRisk.toFixed(1)}M USD ({budgetAtRiskPercent.toFixed(1)}% of total)</p>
              <p><strong>Definition:</strong> Budget allocated to critical and high-risk components requiring immediate attention</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Enhanced Recommendations */}
      {recommendations && recommendations.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Target className="w-5 h-5 mr-2" />
              Strategic Recommendations
            </CardTitle>
            <CardDescription>
              Priority actions based on FSFVI vulnerability analysis and system insights
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recommendations.map((recommendation: string, index: number) => (
                <div key={index} className="flex items-start space-x-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <div className="flex-shrink-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                    {index + 1}
                  </div>
                  <div className="flex-1">
                    <p className="text-gray-800 font-medium">{recommendation}</p>
                    {index === 0 && criticalComponents.length > 0 && (
                      <div className="mt-2 text-sm text-blue-700">
                        <strong>Priority Components:</strong> {criticalComponents.join(', ')}
                      </div>
                    )}
                  </div>
                  <Badge variant="outline" className="text-xs">
                    {index === 0 ? 'Immediate' : index === 1 ? 'High Priority' : 'Strategic'}
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* System Health Summary */}
      <Card className="bg-gradient-to-r from-indigo-50 to-blue-50 border-indigo-200">
        <CardHeader>
          <CardTitle className="flex items-center text-indigo-900">
            <Info className="w-5 h-5 mr-2" />
            System Vulnerability Overview
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center p-4">
              <div className="text-3xl font-bold text-indigo-600 mb-1">{averageVulnerability.toFixed(1)}%</div>
              <div className="text-sm text-indigo-700">Average System Vulnerability</div>
            </div>
            <div className="text-center p-4">
              <div className="text-3xl font-bold text-red-600 mb-1">{((criticalComponents.length + highRiskComponents.length) / components.length * 100).toFixed(0)}%</div>
              <div className="text-sm text-red-700">Components at Risk</div>
            </div>
            <div className="text-center p-4">
              <div className="text-3xl font-bold text-green-600 mb-1">{budgetAtRiskPercent.toFixed(0)}%</div>
              <div className="text-sm text-green-700">Budget Requiring Attention</div>
            </div>
          </div>
          <div className="mt-4 p-3 bg-white bg-opacity-70 rounded-lg">
            <p className="text-sm text-indigo-800 text-center">
              <strong>System Assessment:</strong> {' '}
              {averageVulnerability > 50 ? 'High vulnerability detected - immediate system-wide intervention recommended' :
               averageVulnerability > 30 ? 'Moderate vulnerability - strategic improvements needed' :
               averageVulnerability > 15 ? 'Low to moderate vulnerability - targeted optimizations suggested' :
               'System shows resilient performance with minimal vulnerability'}
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}; 